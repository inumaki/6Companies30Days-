class Solution {
public:
void dfs(int k,vector<bool>&visit,int target,vector<vector<int>>&ans,vector<int>&temp,int prev)
{

if(k==0 )
{
if(target==0)
ans.push_back(temp);

if(target==0)
return;

return ;
}
for(int i=prev+1;i<=9;i++)
{
if(!visit[i] and target-i>=0)
{
    visit[i]=1; 
    temp.push_back(i);   
dfs(k-1,visit,target-i,ans,temp,i);
    visit[i]=0;
    temp.pop_back();
}

}

}

    vector<vector<int>> combinationSum3(int k, int n) {
vector<vector<int>>ans;
vector<bool>visit(9,0);
vector<int>temp;
dfs(k,visit,n,ans,temp,0);

return ans;

        
    }
};
